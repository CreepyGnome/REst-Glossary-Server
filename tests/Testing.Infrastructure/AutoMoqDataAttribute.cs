using System;
using System.Linq;
using AutoFixture.Xunit2;

namespace AutoFixture.AutoMoq
{
    /// <summary>
    /// Provides auto-generated dependencies generated by Moq using <seealso cref="AutoMoqCustomization"/>.
    /// </summary>
    public class AutoMoqDataAttribute : AutoDataAttribute
    {
        /// <summary>
        /// Creates a AutoDataAttribute that creates a fixture customized with an AutoMoqCustomization that
        /// specifies members of a mock will be automatically setup to retrieve the return values from a fixture
        /// </summary>
        public AutoMoqDataAttribute() : this(true, false, 0, null) { }

        /// <summary>
        /// Creates a AutoDataAttribute that creates a fixture customized with an AutoMoqCustomization that
        /// will be defined by the specified values.
        /// </summary>
        /// <param name="configureMembers">
        /// Specifies whether members of a mock will be automatically setup to retrieve the return values from a fixture.
        /// </param>
        /// <param name="generateDelegates">
        /// If value is <c>true</c>, delegate requests are intercepted and created by Moq.
        /// Otherwise, if value is <c>false</c>, delegates are created by the AutoFixture kernel.
        /// </param>
        /// <param name="recursionDepth">
        /// If value is greater than <c>0</c>, circular dependencies will only be generated by AutoFixture up to the specified depth (1 will not generate any circular dependencies).
        /// Otherwise, if value is <c>0</c>, AutoFixture will attempt to generate circular dependencies and will throw exceptions if unable to do so.
        /// </param>
        /// <param name="attributeTypesToIgnoreForProperties">
        /// If any of the types provided are an attribute decorating a property they will be ignored and thereby not set.
        /// </param>
        /// <param name="propertyTypesToIgnore">
        /// If a property has any of the types provided they will be ignored and thereby not set.
        /// </param>
        public AutoMoqDataAttribute(bool configureMembers = true, bool generateDelegates = false, int recursionDepth = 0, Type[] attributeTypesToIgnoreForProperties = null, Type[] propertyTypesToIgnore = null)
            : base(() =>
            {
                var fixture = new Fixture().Customize(new AutoMoqCustomization
                {
                    ConfigureMembers = configureMembers,
                    GenerateDelegates = generateDelegates
                });

                if (recursionDepth > 0)
                    fixture = fixture.Customize(new OmitOnRecursionBehaviorCustomization
                    {
                        RecursionDepth = recursionDepth
                    });

                if (attributeTypesToIgnoreForProperties != null && attributeTypesToIgnoreForProperties.Length > 0)
                    fixture.Customizations.Add(new PropertyWithAttributeOmitterBuilder {ExcludedTypes = attributeTypesToIgnoreForProperties.ToList()});

                if (propertyTypesToIgnore?.Any() == true)
                    fixture.Customizations.Add(new OmitOnPropertyTypeSpecimenBuilder { ExcludedTypes = propertyTypesToIgnore });

                return fixture;
            })
        { }
    }
}
